%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This file is part of the TomoBEAR software.
% Copyright (c) 2021,2022,2023 TomoBEAR Authors <https://github.com/KudryashevLab/TomoBEAR/blob/main/AUTHORS.md>
% 
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published
% by the Free Software Foundation, either version 3 of the License,
% or (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <https://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

classdef BinStacks < Module
    methods
        function obj = BinStacks(configuration)
            obj = obj@Module(configuration);
        end
       
        function obj = setUp(obj)
            obj = setUp@Module(obj);
            createStandardFolder(obj.configuration, "binned_aligned_tilt_stacks_folder", false);
            createStandardFolder(obj.configuration, "binned_tilt_stacks_folder", false);
            createStandardFolder(obj.configuration, "ctf_corrected_binned_aligned_tilt_stacks_folder", false);
            createStandardFolder(obj.configuration, "binned_even_tilt_stacks_folder", false);
            createStandardFolder(obj.configuration, "binned_odd_tilt_stacks_folder", false);
            createStandardFolder(obj.configuration, "binned_aligned_even_tilt_stacks_folder", false);
            createStandardFolder(obj.configuration, "binned_aligned_odd_tilt_stacks_folder", false);
            createStandardFolder(obj.configuration, "binned_aligned_dose_weighted_tilt_stacks_folder", false);
            createStandardFolder(obj.configuration, "binned_aligned_dose_weighted_sum_tilt_stacks_folder", false);
        end
       
        function obj = process(obj)
            field_names = fieldnames(obj.configuration.tomograms);
            disp("INFO: Creating binned aligned stacks...");
            if isfield(obj.configuration, "apix")
                apix_tmp = obj.configuration.apix;
            else
                apix_tmp = obj.configuration.tomograms.(field_names{obj.configuration.set_up.j}).apix;
            end
            for i = 1:length(obj.configuration.binnings)
                apix = apix_tmp * obj.configuration.binnings(i);
                if obj.configuration.binnings(i) == obj.configuration.aligned_stack_binning...
                        && ~isfield(obj.configuration.tomograms.(field_names{obj.configuration.set_up.j}), "motion_corrected_even_files")...
                        && ~isfield(obj.configuration.tomograms.(field_names{obj.configuration.set_up.j}), "motion_corrected_dose_weighted_files")...
                        && ~isfield(obj.configuration.tomograms.(field_names{obj.configuration.set_up.j}), "motion_corrected_dose_sum_weighted_files")...
                        && obj.configuration.use_ctf_corrected_aligned_stack == true
                    disp("INFO: skipping binning for factor " + obj.configuration.binnings(i) + " because it is the same as was generated by BatchRunTomo module!");
                    continue;
                end
                if (isinf(obj.configuration.binnings(i)) || floor(obj.configuration.binnings(i)) ~= obj.configuration.binnings(i))...
                        && (isinf(obj.configuration.binnings(i) / obj.configuration.aligned_stack_binning)...
                        || (floor(obj.configuration.binnings(i) / obj.configuration.aligned_stack_binning) == obj.configuration.binnings(i) / obj.configuration.aligned_stack_binning))
                    error("ERROR: skipping binning for factor " + obj.configuration.binnings(i) + " because integer check was not passed!");
                end
                if obj.configuration.use_ctf_corrected_aligned_stack == true && (obj.configuration.binnings(i) / obj.configuration.aligned_stack_binning) < 1
                    disp("INFO: ctfpahseflip will be run as the requested binning level is lower than stack generated by BatchRunTomo!");
                    obj.configuration.run_ctf_phaseflip = true;
                end
                
                
                % TODO:NOTE implement command to erase fiducials and even
                % and odd stacks
%                 tiltxf_files = getFilePathsFromLastBatchruntomoRun(obj.configuration, "xf");
%                 fid_files = getFilePathsFromLastBatchruntomoRun(obj.configuration, "fid");
%                 erasefid_files = getFilePathsFromLastBatchruntomoRun(obj.configuration, "_erase.fid");

%                 system("xfmodel -xf " + tiltxf_files{1} + " -back " + erasefid_files{1} + " " + obj.output_path + filesep + field_names{obj.configuration.set_up.j} + "_erase_inverted.fid");

                if obj.configuration.use_ctf_corrected_aligned_stack == true && (obj.configuration.binnings(i) / obj.configuration.aligned_stack_binning) == 1
                    bin_factor = obj.configuration.binnings(i);
                    tilt_stacks = getTiltStacks(obj.configuration, true);
                    tilt_stacks = tilt_stacks(contains({tilt_stacks(:).folder}, sprintf("tomogram_%03d", obj.configuration.set_up.j)));
                   
                    if isempty(tilt_stacks)
                        obj.status = 0;
                        return;
                    end
                   
                    [path, name, extension] = fileparts(tilt_stacks.name);
                   
                    xf_file_source = getXfOrAlnFilePaths(obj.configuration, obj.output_path, obj.name);
                   
                    xf_file_destination = obj.output_path + string(filesep) + name + ".xf";
                   
                    obj.temporary_files(end + 1) = createSymbolicLink(xf_file_source, xf_file_destination, obj.log_file_id);
                   
                    stack_source = tilt_stacks.folder + string(filesep) + tilt_stacks.name;
                    stack_destination = obj.output_path + string(filesep) + name + ".st";
                    obj.temporary_files(end + 1) = createSymbolicLink(stack_source, stack_destination, obj.log_file_id);
                   
                    %                     for j = 1:length(obj.configuration.binnings)
                    binned_stack_suffix = "bin_" + num2str(obj.configuration.binnings(i));
                    disp("INFO: Creating " + name + "_" + binned_stack_suffix + ".ali...");
                    stack_output_path = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + ".ali";
                    obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks{i} = stack_output_path;
                    [width, height, z] = getHeightAndWidthFromHeader(stack_destination, -1);
                    executeCommand("newstack"...
                        + " -size " + floor(height / (obj.configuration.binnings(i) / obj.configuration.ft_bin)) + "," + floor(width / (obj.configuration.binnings(i) / obj.configuration.ft_bin))...
                        + " -input " + stack_destination...
                        + " -output " + stack_output_path...
                        + " -xform " + xf_file_destination...
                        + " -antialias " + obj.configuration.antialias_filter...
                        + " -bin " + num2str(bin_factor), false, obj.log_file_id);
                    executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + stack_output_path, false, obj.log_file_id);
                    if obj.configuration.binnings(i) > 1
                        [output_binned_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "binned_aligned_tilt_stacks_folder", obj.log_file_id);
                    else
                        [output_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "aligned_tilt_stacks_folder", obj.log_file_id);
                    end
                elseif obj.configuration.use_ctf_corrected_aligned_stack == true && (obj.configuration.binnings(i) / obj.configuration.aligned_stack_binning) > 1
                    bin_factor = obj.configuration.binnings(i) / obj.configuration.aligned_stack_binning;
                    if obj.configuration.aligned_stack_binning > 1
                        tilt_stacks_path = obj.configuration.processing_path...
                            + string(filesep) + obj.configuration.output_folder...
                            + string(filesep) + obj.configuration.ctf_corrected_binned_aligned_tilt_stacks_folder;
                       
                        % TODO: better take obj.output_path
                        output_path_splitted = strsplit(obj.output_path, "/");
                        name = output_path_splitted(end);
                        tilt_stacks_path = tilt_stacks_path...
                            + string(filesep) + name;
                       
                        tilt_stacks_path = tilt_stacks_path + string(filesep) + "*.ali";
                       
                        tilt_stacks = dir(tilt_stacks_path);
                        for j = 1:length(obj.configuration.binnings)
                            if obj.configuration.aligned_stack_binning == obj.configuration.binnings(j)
                                continue;
                            end
                            tilt_stacks = tilt_stacks(~contains({tilt_stacks.name}, "bin_" + num2str(obj.configuration.binnings(j))));
                        end
                        tilt_stacks = tilt_stacks(1).folder + string(filesep) + tilt_stacks(1).name;
                       
                    else
                        tilt_stacks = getFilePathsFromLastBatchruntomoRun(obj.configuration, "ali");
                        tilt_stacks = tilt_stacks{1};
                    end
                   
                    destination_path = obj.output_path;
                    [status_mkdir, message, message_id] = mkdir(destination_path);
                   
                    stack_source = tilt_stacks;
                   
                    %                     for j = 1:length(obj.configuration.binnings)
                    %                         if obj.configuration.binnings(j) == obj.configuration.aligned_stack_binning
                    %                             continue;
                    %                         end
                   
                    binned_stack_suffix = "bin_" + num2str(obj.configuration.binnings(i));
                    disp("INFO: Creating " + name + "_" + binned_stack_suffix + ".ali");
                    stack_output_path_gold = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + "_" + obj.configuration.ctf_corrected_stack_suffix + ".ali";  % "_gold.ali";
                    
                    executeCommand("newstack"...
                        + " -input " + stack_source...
                        + " -output " + stack_output_path_gold...
                        + " -antialias " + obj.configuration.antialias_filter...
                        + " -bin " + num2str(bin_factor), false, obj.log_file_id);
                    executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + stack_output_path_gold, false, obj.log_file_id);
%                     system("imodtrans -S " + 1/bin_factor + " " + fid_files{1} + " " + obj.output_path + filesep + field_names{obj.configuration.set_up.j} + "_unscaled_erase.fid");
%                     system("imodtrans -sx 4 -sy 4 -sz 1 -2 " + tiltxf_files{1} + " " + obj.output_path + filesep + field_names{obj.configuration.set_up.j} + "_erase_inverted.fid" + " " + obj.output_path + filesep + field_names{obj.configuration.set_up.j} + "_erase.fid"); %  " + (obj.configuration.binnings(i)/obj.configuration.ft_bin) + "
                    stack_output_path = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + "_" + obj.configuration.ctf_corrected_stack_suffix + ".ali";
                    obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks{i} = stack_output_path;
%                     system("ccderaser -InputFile " + stack_output_path_gold + " -ModelFile " + obj.output_path + filesep + field_names{obj.configuration.set_up.j} + "_erase.fid -BetterRadius " + (44.54/bin_factor) + " -PolynomialOrder 0 -CircleObjects / -MergePatches 1 -ExcludeAdjacent 1 -OutputFile " + stack_output_path);
%                     delete(stack_output_path_gold);
                    [output_binned_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "ctf_corrected_binned_aligned_tilt_stacks_folder", obj.log_file_id);
                    %                     end
                else
                    bin_factor = obj.configuration.binnings(i);
                    if obj.configuration.use_ctf_corrected_aligned_stack == true || obj.configuration.use_aligned_stack == true
                        tilt_stacks = getAlignedTiltStacksFromStandardFolder(obj.configuration, true);
                    else
                        tilt_stacks = getTiltStacks(obj.configuration, true);
                    end
                    
                    tilt_stacks = tilt_stacks(contains({tilt_stacks(:).folder}, sprintf("tomogram_%03d", obj.configuration.set_up.j)));
                   
                    if isempty(tilt_stacks)
                        obj.status = 0;
                        return;
                    elseif length(tilt_stacks) > 1
                        tilt_stacks = tilt_stacks(1);
                    end
                    
                    [path, name, extension] = fileparts(tilt_stacks.name);
                    stack_source = tilt_stacks.folder + string(filesep) + tilt_stacks.name;
                    stack_destination = obj.output_path + string(filesep) + name + ".st";
                    obj.temporary_files(end + 1) = createSymbolicLink(stack_source, stack_destination, obj.log_file_id);
                    [width, height, z] = getHeightAndWidthFromHeader(stack_destination, -1);
                    %stk_bin_ext = ".ali";
                    
                    if obj.configuration.use_ctf_corrected_aligned_stack == true || obj.configuration.use_aligned_stack == true    
                        %xf_file_source = getXfOrAlnFilePaths(obj.configuration, obj.output_path, obj.name);
                        %xf_file_destination = obj.output_path + string(filesep) + name + ".xf";
                        %obj.temporary_files(end + 1) = createSymbolicLink(xf_file_source, xf_file_destination, obj.log_file_id);
                        %xform_command_snippet = " -xform " + xf_file_destination;
                        stk_bin_ext = ".ali";
                        size_command_snippet = "";
                    else
                        %xform_command_snippet = "";
                        stk_bin_ext = ".st";
                        size_command_snippet = " -size " + floor(height / (obj.configuration.binnings(i) / obj.configuration.ft_bin)) + "," + floor(width / (obj.configuration.binnings(i) / obj.configuration.ft_bin));
                    end
                   
                    %                     for j = 1:length(obj.configuration.binnings)
                    binned_stack_suffix = "bin_" + num2str(obj.configuration.binnings(i));
                    
                    disp("INFO: Creating " + name + "_" + binned_stack_suffix + stk_bin_ext + "...");
                    stack_output_path = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + stk_bin_ext;
                    
                    obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks{i} = stack_output_path;
                    
                    executeCommand("newstack"...
                        + size_command_snippet...
                        ...%+ " -size " + floor(height / (obj.configuration.binnings(i) / obj.configuration.ft_bin)) + "," + floor(width / (obj.configuration.binnings(i) / obj.configuration.ft_bin))...
                        + " -input " + stack_destination...
                        + " -output " + stack_output_path...
                        ...%+ " -xform " + xf_file_destination...
                        ...%+ xform_command_snippet...
                        + " -antialias " + obj.configuration.antialias_filter...
                        + " -bin " + num2str(bin_factor), false, obj.log_file_id);
                    executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + stack_output_path, false, obj.log_file_id);
                    
                    if obj.configuration.binnings(i) > 1
                        if obj.configuration.use_ctf_corrected_aligned_stack == true || obj.configuration.use_aligned_stack == true
                            slink_dir = "binned_aligned_tilt_stacks_folder";
                        else
                            slink_dir = "binned_tilt_stacks_folder";
                        end
                        [output_binned_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, slink_dir, obj.log_file_id);
                    else
                        if obj.configuration.use_ctf_corrected_aligned_stack == true || obj.configuration.use_aligned_stack == true
                            slink_dir = "aligned_tilt_stacks_folder";
                        else
                            slink_dir = "tilt_stacks_folder";
                        end
                        [output_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, slink_dir, obj.log_file_id);
                    end
                   
                    if obj.configuration.run_ctf_phaseflip == true
                        tlt_file = getFilePathsFromLastBatchruntomoRun(obj.configuration, "rawtlt");
                        defocus_file_struct = getDefocusFiles(obj.configuration, '.defocus');
                        defocus_file = defocus_file_struct{obj.configuration.set_up.j}.folder + string(filesep) + defocus_file_struct{obj.configuration.set_up.j}.name;
                        
                        [stack_filepath, stack_filename, stack_ext] = fileparts(stack_output_path);
                        %splitted_tilt_stack_path_name = strsplit(stack_output_path, ".");
                        %ctf_corrected_stack_destination = splitted_tilt_stack_path_name(1)...
                        %    + "_" + obj.configuration.ctf_corrected_stack_suffix...
                        %    + "." + splitted_tilt_stack_path_name(2);
                        ctf_corrected_stack_destination = stack_filepath + filesep + stack_filename...
                            + "_" + obj.configuration.ctf_corrected_stack_suffix...
                            + stack_ext;
                       
                        command = "ctfphaseflip -input " + stack_output_path...
                            + " -output " + ctf_corrected_stack_destination...
                            + " -angleFn " + tlt_file{1}...
                            + " -defFn " + defocus_file{1}...
                            + " -defTol " + obj.configuration.defocus_tolerance...
                            + " -iWidth " + obj.configuration.iWidth...
                            + " -maxWidth " + height...
                            + " -pixelSize " + (apix) / 10 ...
                            + " -volt " + obj.configuration.keV...
                            + " -cs " + obj.configuration.spherical_aberation...
                            + " -ampContrast " + obj.configuration.ampContrast;
                       
                        % NOTE: if stack is aligned, no need to transform
                        % NOTE: if stack is non-aligned, no need to
                        % transform since it was not requested
                        %if obj.configuration.use_aligned_stack == false
                        %    command = command + " -xform " + xf_file_destination;
                        %end
                       
                        if obj.configuration.set_up.gpu > 0 && versionGreaterThan(obj.configuration.environment_properties.imod_version, "4.10.9")
                            command = command + " -gpu " + obj.configuration.set_up.gpu;
                        end
                       
                        executeCommand(command, false, obj.log_file_id);
                        executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + ctf_corrected_stack_destination, false, obj.log_file_id);

                        %TODO: put in ctf corrected stacks folder
                        if obj.configuration.binnings(i) > 1
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_binned_aligned_tilt_stacks_folder", obj.log_file_id, true);
                        else
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_aligned_tilt_stacks_folder", obj.log_file_id, true);
                        end
                    end
                   
                    % TODO: add ccderaser to delete fiducials from
                    % stacks or some other method
                   
                    if isfield(obj.configuration, "reconstruct_tomograms") && obj.configuration.reconstruct_tomograms == true
                        disp("INFO: tomograms will be generated.");
                        ctf_corrected_tomogram_destination = splitted_tilt_stack_path_name(1) + "_"...
                            + obj.configuration.ctf_corrected_stack_suffix + "_"...
                            + obj.configuration.tomogram_suffix + "."...
                            + splitted_tilt_stack_path_name(2);
                       
                        command = "tilt -InputProjections " + ctf_corrected_stack_destination...
                            + " -OutputFile " + ctf_corrected_tomogram_destination...
                            + " -TILTFILE " + tilt_file_destination...
                            + " -THICKNESS " + obj.configuration.reconstruction_thickness / obj.configuration.aligned_stack_binning;
                       
                        if obj.configuration.set_up.gpu > 0
                            command = command + " -UseGPU " + num2str(obj.configuration.set_up.gpu);
                        end
                       
                        executeCommand(command, false, obj.log_file_id);
                        % TODO: if time and motivation implement exclude views by
                        % parametrization not by truncation
                        %                + " -EXCLUDELIST2 $EXCLUDEVIEWS");
                       
                        ctf_corrected_rotated_tomogram_destination = splitted_tilt_stack_path_name(1) + "_"...
                            + obj.configuration.ctf_corrected_stack_suffix + "_"...
                            + obj.configuration.tomogram_suffix + "."...
                            + splitted_tilt_stack_path_name(2);
                        executeCommand("trimvol -rx " + ctf_corrected_tomogram_destination...
                            + " " + ctf_corrected_rotated_tomogram_destination, false, obj.log_file_id);
                    end
                    %                     end
                end
                                
                bin_factor = obj.configuration.binnings(i) / obj.configuration.ft_bin;
                if isfield(obj.configuration.tomograms.(field_names{obj.configuration.set_up.j}), "motion_corrected_even_files")
                    tilt_stacks = getEvenTiltStacksFromStandardFolder(obj.configuration, true);
                    tilt_stacks = tilt_stacks(contains({tilt_stacks(:).folder}, sprintf("tomogram_%03d", obj.configuration.set_up.j)));
                   
                    if isempty(tilt_stacks)
                        obj.status = 0;
                        return;
                    end
                    
                    [path, name, extension] = fileparts(tilt_stacks.name);
                    if obj.configuration.use_ctf_corrected_aligned_stack == true || obj.configuration.use_aligned_stack == true
                        xf_file_source = getXfOrAlnFilePaths(obj.configuration, obj.output_path, obj.name);
                        xf_file_destination = obj.output_path + string(filesep) + name + ".xf";
                        obj.temporary_files(end + 1) = createSymbolicLink(xf_file_source, xf_file_destination, obj.log_file_id);
                        xform_command_snippet = " -xform " + xf_file_destination;
                        stk_bin_ext = ".ali";
                    else
                        xform_command_snippet = "";
                        stk_bin_ext = ".st";
                    end
                    
                    stack_source = tilt_stacks.folder + string(filesep) + tilt_stacks.name;
                    stack_destination = obj.output_path + string(filesep) + name + "_even.st";
                    obj.temporary_files(end + 1) = createSymbolicLink(stack_source, stack_destination, obj.log_file_id);
                   
                    %                     for j = 1:length(obj.configuration.binnings)
                    binned_stack_suffix = "bin_" + num2str(obj.configuration.binnings(i));
                    disp("INFO: Creating " + name + "_" + binned_stack_suffix + "_even" + stk_bin_ext + "...");
                    stack_output_path = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + "_even" + stk_bin_ext;
                    obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks{i} = stack_output_path;
                    [width, height, z] = getHeightAndWidthFromHeader(stack_destination, -1);
                    executeCommand("newstack"...
                        + " -size " + floor(height / (obj.configuration.binnings(i) / obj.configuration.ft_bin)) + "," + floor(width / (obj.configuration.binnings(i) / obj.configuration.ft_bin))...
                        + " -input " + stack_destination...
                        + " -output " + stack_output_path...
                        ...#+ " -xform " + xf_file_destination...
                        + xform_command_snippet...
                        + " -antialias " + obj.configuration.antialias_filter...
                        + " -bin " + num2str(bin_factor), false, obj.log_file_id);
                    
                    executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + stack_output_path, false, obj.log_file_id);

                    if obj.configuration.run_ctf_phaseflip == true
                        tlt_file = getFilePathsFromLastBatchruntomoRun(obj.configuration, "rawtlt");
                        defocus_file_struct = getDefocusFiles(obj.configuration, '.defocus');
                        defocus_file = defocus_file_struct{obj.configuration.set_up.j}.folder + string(filesep) + defocus_file_struct{obj.configuration.set_up.j}.name;
                        splitted_tilt_stack_path_name = strsplit(stack_output_path, ".");
                        ctf_corrected_stack_destination = splitted_tilt_stack_path_name(1)...
                            + obj.configuration.ctf_corrected_stack_suffix...
                            + ".ali";
                       
                        command = "ctfphaseflip -input " + stack_output_path...
                            + " -output " + ctf_corrected_stack_destination...
                            + " -angleFn " + tlt_file{1}...
                            + " -defFn " + defocus_file{1}...
                            + " -defTol " + obj.configuration.defocus_tolerance...
                            + " -iWidth " + obj.configuration.iWidth...
                            + " -maxWidth " + height...
                            + " -pixelSize " + (apix) / 10 ...
                            + " -volt " + obj.configuration.keV...
                            + " -cs " + obj.configuration.spherical_aberation...
                            + " -ampContrast " + obj.configuration.ampContrast;
                       
                        if obj.configuration.use_aligned_stack == false
                            command = command + " -xform " + xf_file_destination;
                        end
                       
                        if obj.configuration.set_up.gpu > 0 && versionGreaterThan(obj.configuration.environment_properties.imod_version, "4.10.9")
                            command = command + " -gpu " + obj.configuration.set_up.gpu;
                        end
                       
                        executeCommand(command, false, obj.log_file_id);
                        executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + ctf_corrected_stack_destination, false, obj.log_file_id);
                        
                        %TODO: put in ctf corrected stacks folder
                        if obj.configuration.binnings(i) > 1
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_binned_aligned_even_tilt_stacks_folder", obj.log_file_id, true);
                        else
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_aligned_even_tilt_stacks_folder", obj.log_file_id, true);
                        end
                    end
                   
                    if obj.configuration.binnings(i) > 1
                        [output_binned_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "binned_aligned_even_tilt_stacks_folder", obj.log_file_id);
                    else
                        [output_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "aligned_even_tilt_stacks_folder", obj.log_file_id);
                    end
                   
                    stack_output_path = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + "_even.st";
                    disp("INFO: Creating " + name + "_" + binned_stack_suffix + "_even.st...");

                    executeCommand("newstack"...
                        + " -size " + floor(height / (obj.configuration.binnings(i) / obj.configuration.ft_bin)) + "," + floor(width / (obj.configuration.binnings(i) / obj.configuration.ft_bin))...
                        + " -input " + stack_destination...
                        + " -output " + stack_output_path...
                        ...%+ " -xform " + xf_file_destination...
                        + " -antialias " + obj.configuration.antialias_filter...
                        + " -bin " + num2str(bin_factor), false, obj.log_file_id);
                    executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + stack_output_path, false, obj.log_file_id);
                   
                    if obj.configuration.binnings(i) > 1
                        [output_binned_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "binned_even_tilt_stacks_folder", obj.log_file_id);
                    else
                        [output_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "even_tilt_stacks_folder", obj.log_file_id);
                    end
                   

                end
               
                if isfield(obj.configuration.tomograms.(field_names{obj.configuration.set_up.j}), "motion_corrected_odd_files")
                    tilt_stacks = getOddTiltStacksFromStandardFolder(obj.configuration, true);
                    tilt_stacks = tilt_stacks(contains({tilt_stacks(:).folder}, sprintf("tomogram_%03d", obj.configuration.set_up.j)));
                   
                    if isempty(tilt_stacks)
                        obj.status = 0;
                        return;
                    end
                    
                    [path, name, extension] = fileparts(tilt_stacks.name);
                    if obj.configuration.use_ctf_corrected_aligned_stack == true || obj.configuration.use_aligned_stack == true
                        xf_file_source = getXfOrAlnFilePaths(obj.configuration, obj.output_path, obj.name);
                        xf_file_destination = obj.output_path + string(filesep) + name + ".xf";
                        obj.temporary_files(end + 1) = createSymbolicLink(xf_file_source, xf_file_destination, obj.log_file_id);
                        xform_command_snippet = " -xform " + xf_file_destination;
                        stk_bin_ext = ".ali";
                    else
                        xform_command_snippet = "";
                        stk_bin_ext = ".st";
                    end
                   
                    stack_source = tilt_stacks.folder + string(filesep) + tilt_stacks.name;
                    stack_destination = obj.output_path + string(filesep) + name + "_odd.st";
                    obj.temporary_files(end + 1) = createSymbolicLink(stack_source, stack_destination, obj.log_file_id);
                   
                    %                     for j = 1:length(obj.configuration.binnings)
                    binned_stack_suffix = "bin_" + num2str(obj.configuration.binnings(i));
                    disp("INFO: Creating " + name + "_" + binned_stack_suffix + "_odd" + stk_bin_ext + "...");
                    stack_output_path = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + "_odd" + stk_bin_ext;
                    obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks{i} = stack_output_path;
                    [width, height, z] = getHeightAndWidthFromHeader(stack_destination, -1);
                    executeCommand("newstack"...
                        + " -size " + floor(height / (obj.configuration.binnings(i) / obj.configuration.ft_bin)) + "," + floor(width / (obj.configuration.binnings(i) / obj.configuration.ft_bin))...
                        + " -input " + stack_destination...
                        + " -output " + stack_output_path...
                        ...#+ " -xform " + xf_file_destination...
                        + xform_command_snippet...
                        + " -antialias " + obj.configuration.antialias_filter...
                        + " -bin " + num2str(bin_factor), false, obj.log_file_id);
                    executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + stack_output_path, false, obj.log_file_id);
                   
                    if obj.configuration.run_ctf_phaseflip == true
                        tlt_file = getFilePathsFromLastBatchruntomoRun(obj.configuration, "rawtlt");
                        defocus_file_struct = getDefocusFiles(obj.configuration, '.defocus');
                        defocus_file = defocus_file_struct{obj.configuration.set_up.j}.folder + string(filesep) + defocus_file_struct{obj.configuration.set_up.j}.name;
                        splitted_tilt_stack_path_name = strsplit(stack_output_path, ".");
                        ctf_corrected_stack_destination = splitted_tilt_stack_path_name(1)...
                            + obj.configuration.ctf_corrected_stack_suffix...
                            + ".ali";
                       
                        command = "ctfphaseflip -input " + stack_output_path...
                            + " -output " + ctf_corrected_stack_destination...
                            + " -angleFn " + tlt_file{1}...
                            + " -defFn " + defocus_file{1}...
                            + " -defTol " + obj.configuration.defocus_tolerance...
                            + " -iWidth " + obj.configuration.iWidth...
                            + " -maxWidth " + height...
                            + " -pixelSize " + (apix) / 10 ...
                            + " -volt " + obj.configuration.keV...
                            + " -cs " + obj.configuration.spherical_aberation...
                            + " -ampContrast " + obj.configuration.ampContrast;
                       
                        if obj.configuration.use_aligned_stack == false
                            command = command + " -xform " + xf_file_destination;
                        end
                       
                        if obj.configuration.set_up.gpu > 0 && versionGreaterThan(obj.configuration.environment_properties.imod_version, "4.10.9")
                            command = command + " -gpu " + obj.configuration.set_up.gpu;
                        end
                       
                        executeCommand(command, false, obj.log_file_id);
                        executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + ctf_corrected_stack_destination, false, obj.log_file_id);

                        %TODO: put in ctf corrected stacks folder
                        if obj.configuration.binnings(i) > 1
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_binned_aligned_odd_tilt_stacks_folder", obj.log_file_id, true);
                        else
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_aligned_odd_tilt_stacks_folder", obj.log_file_id, true);
                        end
                    end
                   
                    if obj.configuration.binnings(i) > 1
                        [output_binned_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "binned_aligned_odd_tilt_stacks_folder", obj.log_file_id);
                    else
                        [output_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "aligned_odd_tilt_stacks_folder", obj.log_file_id);
                    end
                   
                    stack_output_path = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + "_odd.st";
                    executeCommand("newstack"...
                        + " -size " + floor(height / (obj.configuration.binnings(i) / obj.configuration.ft_bin)) + "," + floor(width / (obj.configuration.binnings(i) / obj.configuration.ft_bin))...
                        + " -input " + stack_destination...
                        + " -output " + stack_output_path...
                        ...%+ " -xform " + xf_file_destination...
                        + " -antialias " + obj.configuration.antialias_filter...
                        + " -bin " + num2str(bin_factor), false, obj.log_file_id);
                    executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + stack_output_path, false, obj.log_file_id);
                   
                    if obj.configuration.binnings(i) > 1
                        [output_binned_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "binned_odd_tilt_stacks_folder", obj.log_file_id);
                    else
                        [output_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "odd_tilt_stacks_folder", obj.log_file_id);
                    end
                   

                end
               
                if isfield(obj.configuration.tomograms.(field_names{obj.configuration.set_up.j}), "motion_corrected_dose_weighted_files")
                    tilt_stacks = getDoseWeightedTiltStacksFromStandardFolder(obj.configuration, true);
                    tilt_stacks = tilt_stacks(contains({tilt_stacks(:).folder}, sprintf("tomogram_%03d", obj.configuration.set_up.j)));
                   
                    if isempty(tilt_stacks)
                        obj.status = 0;
                        return;
                    end
                   
                    [path, name, extension] = fileparts(tilt_stacks.name);
                    if obj.configuration.use_ctf_corrected_aligned_stack == true || obj.configuration.use_aligned_stack == true
                        xf_file_source = getXfOrAlnFilePaths(obj.configuration, obj.output_path, obj.name);
                        xf_file_destination = obj.output_path + string(filesep) + name + ".xf";
                        obj.temporary_files(end + 1) = createSymbolicLink(xf_file_source, xf_file_destination, obj.log_file_id);
                        xform_command_snippet = " -xform " + xf_file_destination;
                        stk_bin_ext = ".ali";
                    else
                        xform_command_snippet = "";
                        stk_bin_ext = ".st";
                    end
                    
                    stack_source = tilt_stacks.folder + string(filesep) + tilt_stacks.name;
                    stack_destination = obj.output_path + string(filesep) + name + "_dw.st";
                    obj.temporary_files(end + 1) = createSymbolicLink(stack_source, stack_destination, obj.log_file_id);
                   
                    %                     for j = 1:length(obj.configuration.binnings)
                    binned_stack_suffix = "bin_" + num2str(obj.configuration.binnings(i));
                    disp("INFO: Creating " + name + "_" + binned_stack_suffix + "_dw" + stk_bin_ext + "...");
                    stack_output_path = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + "_dw" + stk_bin_ext;
                    obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks{i} = stack_output_path;
                    [width, height, z] = getHeightAndWidthFromHeader(stack_destination, -1);
                    executeCommand("newstack"...
                        + " -size " + floor(height / (obj.configuration.binnings(i) / obj.configuration.ft_bin)) + "," + floor(width / (obj.configuration.binnings(i) / obj.configuration.ft_bin))...
                        + " -input " + stack_destination...
                        + " -output " + stack_output_path...
                        ...#+ " -xform " + xf_file_destination...
                        + xform_command_snippet...
                        + " -antialias " + obj.configuration.antialias_filter...
                        + " -bin " + num2str(bin_factor), false, obj.log_file_id);
                    executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + stack_output_path, false, obj.log_file_id);
                   
                    if obj.configuration.binnings(i) > 1
                        [output_binned_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "binned_aligned_dose_weighted_tilt_stacks_folder", obj.log_file_id);
                    else
                        [output_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "aligned_dose_weighted_tilt_stacks_folder", obj.log_file_id);
                    end
                   
                    if obj.configuration.run_ctf_phaseflip == true
                        tlt_file = getFilePathsFromLastBatchruntomoRun(obj.configuration, "rawtlt");
                        defocus_file_struct = getDefocusFiles(obj.configuration, '.defocus');
                        defocus_file = defocus_file_struct{obj.configuration.set_up.j}.folder + string(filesep) + defocus_file_struct{obj.configuration.set_up.j}.name;
                        splitted_tilt_stack_path_name = strsplit(stack_output_path, ".");
                        ctf_corrected_stack_destination = splitted_tilt_stack_path_name(1)...
                            + obj.configuration.ctf_corrected_stack_suffix...
                            + ".ali";
                       
                        command = "ctfphaseflip -input " + stack_output_path...
                            + " -output " + ctf_corrected_stack_destination...
                            + " -angleFn " + tlt_file{1}...
                            + " -defFn " + defocus_file{1}...
                            + " -defTol " + obj.configuration.defocus_tolerance...
                            + " -iWidth " + obj.configuration.iWidth...
                            + " -maxWidth " + height...
                            + " -pixelSize " + (apix) / 10 ...
                            + " -volt " + obj.configuration.keV...
                            + " -cs " + obj.configuration.spherical_aberation...
                            + " -ampContrast " + obj.configuration.ampContrast;
                       
                        if obj.configuration.use_aligned_stack == false
                            command = command + " -xform " + xf_file_destination;
                        end
                       
                        if obj.configuration.set_up.gpu > 0 && versionGreaterThan(obj.configuration.environment_properties.imod_version, "4.10.9")
                            command = command + " -gpu " + obj.configuration.set_up.gpu;
                        end
                       
                        executeCommand(command, false, obj.log_file_id);
                        executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + ctf_corrected_stack_destination, false, obj.log_file_id);

                        %TODO: put in ctf corrected stacks folder
                        if obj.configuration.binnings(i) > 1
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_binned_aligned_dose_weighted_tilt_stacks_folder", obj.log_file_id, true);
                        else
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_aligned_dose_weighted_tilt_stacks_folder", obj.log_file_id, true);
                        end
                    end
                end
               
                if isfield(obj.configuration.tomograms.(field_names{obj.configuration.set_up.j}), "motion_corrected_dose_weighted_sum_files")
                    tilt_stacks = getDoseWeightedSumTiltStacksFromStandardFolder(obj.configuration, true);
                    tilt_stacks = tilt_stacks(contains({tilt_stacks(:).folder}, sprintf("tomogram_%03d", obj.configuration.set_up.j)));
                   
                    if isempty(tilt_stacks)
                        obj.status = 0;
                        return;
                    end
                    
                    
                    [path, name, extension] = fileparts(tilt_stacks.name);
                    if obj.configuration.use_ctf_corrected_aligned_stack == true || obj.configuration.use_aligned_stack == true
                        xf_file_source = getXfOrAlnFilePaths(obj.configuration, obj.output_path, obj.name);
                        xf_file_destination = obj.output_path + string(filesep) + name + ".xf";
                        obj.temporary_files(end + 1) = createSymbolicLink(xf_file_source, xf_file_destination, obj.log_file_id);
                        xform_command_snippet = " -xform " + xf_file_destination;
                        stk_bin_ext = ".ali";
                    else
                        xform_command_snippet = "";
                        stk_bin_ext = ".st";
                    end
                                       
                    stack_source = tilt_stacks.folder + string(filesep) + tilt_stacks.name;
                    stack_destination = obj.output_path + string(filesep) + name + "_dws.st";
                    obj.temporary_files(end + 1) = createSymbolicLink(stack_source, stack_destination, obj.log_file_id);
                   
                    %                     for j = 1:length(obj.configuration.binnings)
                    binned_stack_suffix = "bin_" + num2str(obj.configuration.binnings(i));
                    disp("INFO: Creating " + name + "_" + binned_stack_suffix + "_dws" + stk_bin_ext + "...");
                    stack_output_path = obj.output_path + string(filesep) + name + "_" + binned_stack_suffix + "_dws" + stk_bin_ext;
                    obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks{i} = stack_output_path;
                    [width, height, z] = getHeightAndWidthFromHeader(stack_destination, -1);
                    executeCommand("newstack"...
                        + " -size " + floor(height / (obj.configuration.binnings(i) / obj.configuration.ft_bin)) + "," + floor(width / (obj.configuration.binnings(i) / obj.configuration.ft_bin))...
                        + " -input " + stack_destination...
                        + " -output " + stack_output_path...
                        ...#+ " -xform " + xf_file_destination...
                        + xform_command_snippet...
                        + " -antialias " + obj.configuration.antialias_filter...
                        + " -bin " + num2str(bin_factor), false, obj.log_file_id);
                    executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + stack_output_path, false, obj.log_file_id);
                   
                    if obj.configuration.binnings(i) > 1
                        [output_binned_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).binned_stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "binned_aligned_dose_weighted_sum_tilt_stacks_folder", obj.log_file_id);
                    else
                        [output_stacks_symbolic_links, obj.dynamic_configuration.tomograms.(field_names{obj.configuration.set_up.j}).stacks_symbolic_links{i}] = createSymbolicLinkInStandardFolder(obj.configuration, stack_output_path, "aligned_even_dose_weighted_sum_stacks_folder", obj.log_file_id);
                    end
                   
                    if obj.configuration.run_ctf_phaseflip == true
                        tlt_file = getFilePathsFromLastBatchruntomoRun(obj.configuration, "rawtlt");
                        defocus_file_struct = getDefocusFiles(obj.configuration, '.defocus');
                        defocus_file = defocus_file_struct{obj.configuration.set_up.j}.folder + string(filesep) + defocus_file_struct{obj.configuration.set_up.j}.name;
                        splitted_tilt_stack_path_name = strsplit(stack_output_path, ".");
                        ctf_corrected_stack_destination = splitted_tilt_stack_path_name(1)...
                            + obj.configuration.ctf_corrected_stack_suffix...
                            + ".ali";
                       
                        command = "ctfphaseflip -input " + stack_output_path...
                            + " -output " + ctf_corrected_stack_destination...
                            + " -angleFn " + tlt_file{1}...
                            + " -defFn " + defocus_file{1}...
                            + " -defTol " + obj.configuration.defocus_tolerance...
                            + " -iWidth " + obj.configuration.iWidth...
                            + " -maxWidth " + height...
                            + " -pixelSize " + (apix) / 10 ...
                            + " -volt " + obj.configuration.keV...
                            + " -cs " + obj.configuration.spherical_aberation...
                            + " -ampContrast " + obj.configuration.ampContrast;
                       
                        if obj.configuration.use_aligned_stack == false
                            command = command + " -xform " + xf_file_destination;
                        end
                       
                        if obj.configuration.set_up.gpu > 0 && versionGreaterThan(obj.configuration.environment_properties.imod_version, "4.10.9")
                            command = command + " -gpu " + obj.configuration.set_up.gpu;
                        end
                       
                        executeCommand(command, false, obj.log_file_id);
                        executeCommand("alterheader -del " + apix + "," + apix + "," + apix + "," + " " + ctf_corrected_stack_destination, false, obj.log_file_id);

                        %TODO: put in ctf corrected stacks folder
                        if obj.configuration.binnings(i) > 1
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_binned_aligned_dose_weighted_sum_tilt_stacks_fold", obj.log_file_id, true);
                        else
                            createSymbolicLinkInStandardFolder(obj.configuration, ctf_corrected_stack_destination, "ctf_corrected_aligned_dose_weighted_sum_tilt_stacks_folder", obj.log_file_id, true);
                        end
                    end
                end
            end
            disp("INFO: Binning stacks done!");
        end
    end
end
